/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package mobileharness.shared.spec;

import "src/java/com/google/wireless/qa/mobileharness/shared/proto/spec/base_spec.proto";

option java_package = "com.google.wireless.qa.mobileharness.shared.proto.spec.decorator";
option java_multiple_files = true;

// Specs for {@link #AndroidDeviceSettingsDecorator}.
// If a field is not set explicitly, it will be ignored, but not set to the
// default value.
//
// next tag: 82

message AndroidDeviceSettingsDecoratorSpec {
  extend DecoratorSpec {
    optional AndroidDeviceSettingsDecoratorSpec ext = 122869961;
  }
  optional int32 screen_brightness = 2 [(field_detail) = {
    help: "Set the screen brightness to the number of nits. "
          "screen_adaptive_brightness must be set to false explicitly."
  }];
  optional bool enable_screen_saver = 3
      [(field_detail) = { help: "Turn screen saver on or off." }];
  optional int64 screen_timeout_sec = 4 [(field_detail) = {
    help: "Set the screen timeout in second. If set, then screen_always_on "
          "must be off or not set."
  }];
  optional bool screen_adaptive_brightness = 5
      [(field_detail) = { help: "Turn screen adaptive brightness on or off." }];
  optional bool notification_led = 6
      [(field_detail) = { help: "Turn the notification led on or off." }];
  optional bool enable_auto_rotate = 7
      [(field_detail) = { help: "Turn auto rotate on or off." }];
  optional bool enable_audio = 8
      [(field_detail) = { help: "Turn audio on or off. It requires reboot." }];
  optional bool enable_volta = 9
      [(field_detail) = { help: "Enable the Volta app." }];
  optional bool enable_playstore = 10
      [(field_detail) = { help: "Disable the Play Store app." }];
  optional bool enable_doze = 12
      [(field_detail) = { help: "Enable device from going into doze mode." }];
  optional bool enable_nfc = 13
      [(field_detail) = { help: "Turn nfc on or off." }];
  optional bool enable_screen_ambient_mode = 14
      [(field_detail) = { help: "Turn screen ambient mode on or off." }];
  optional bool enable_icing_download = 16
      [(field_detail) = { help: "Enable icing download or not. " }];
  optional bool enable_clock_dump_info = 17
      [(field_detail) = { help: "Enable clock dump info or not." }];
  optional bool enable_location_services = 18 [
    (field_detail) = { help: "Enable location usage for services or not. " }
  ];
  optional bool enable_location_collection = 19
      [(field_detail) = { help: "Enable location collection or not. " }];
  optional bool enable_wifi = 20
      [(field_detail) = { help: "Turn wifi on or off." }];
  optional bool enable_location_gps = 21
      [(field_detail) = { help: "Turn the GPS location on or off." }];
  optional bool enable_location_network = 22
      [(field_detail) = { help: "Turn the network location on or off." }];
  optional bool enable_airplane_mode = 23
      [(field_detail) = { help: "Turn airplane mode on or off." }];
  optional bool enable_heads_up_notifications = 24
      [(field_detail) = { help: "Turn the heads up notifications on or off." }];
  optional bool enable_cast_broadcast = 25
      [(field_detail) = { help: "Turn the cast broadcast on or off." }];

  enum Reboot {
    // Reboot before all other settings.
    BEFORE_SETTING = 1;
    // Reboot after all other settings.
    AFTER_SETTING = 2;
    // Never reboot the device, even if it is necessary according to the
    // settings.
    NEVER = 3;
  }
  optional Reboot force_reboot = 26 [(field_detail) = {
    help: "Reboot device [BEFORE|AFTER] all other settings, or [NEVER].\n"
          "Warning: If it is set, the decorator will not detect whether some "
          "settings need reboot any more, so the device may reboot at the "
          "wrong time because of this setting. So it is recommended to leave "
          "this setting unset."
  }];

  repeated string enable_package = 27
      [(field_detail) = { help: "Package to enable." }];
  repeated string disable_package_in_test = 28 [(field_detail) = {
    help: "Package to disable in the test. After the test the decorator will "
          "try to re-enable the package to avoid device crash after reboot. "
          "If you disable a built-in app, other apps may misbehave and will "
          "likely cause your phone to go into a boot loop/soft brick."
  }];

  optional int64 gtalk_wifi_max_heartbeat_ping_interval_sec = 29
      [(field_detail) = {
        help: "Set the maximum GCM heartbeat interval used while on the WIFI "
              "network in second."
      }];

  optional int64 gtalk_nosync_heartbeat_ping_interval_sec = 30
      [(field_detail) = {
        help: "Set GCM heartbeat pings to the GTalk server interval in "
              "second."
      }];

  optional bool enable_adaptive_wifi_heartbeat = 31
      [(field_detail) = { help: "Enable adaptive wifi GCM heartbeat." }];

  optional float animator_duration_scale = 32 [(field_detail) = {
    help: "Scaling factor for Animator-based animations. This affects "
          "both the start delay and duration of all such animations. "
          "Setting to 0 will cause animations to end immediately. "
          "The default value is 1."
  }];

  optional float transition_animation_scale = 33 [(field_detail) = {
    help: "Scaling factor for activity transition animations. "
          "Setting to 0 will disable window animations."
  }];

  optional float window_animation_scale = 34 [(field_detail) = {
    help: "Scaling factor for normal window animations. "
          "Setting to 0 will disable window animations."
  }];

  optional bool enforce_cpu_status = 35 [(field_detail) = {
    help: "True to force certain CPU online/offline and set runtime freq."
  }];

  // When using a map type for this CpuRuntimeFreq field, we get runtime error:
  //
  // java.lang.UnsupportedOperationException:
  // Nested builder not supported for map fields.
  //
  // From moma search, workarounds employed by other teams with the same problem
  // were to replace map with a repeated field.
  //
  // This is a <cpu ID, runtime frequency> pair to configiure the runtime CPU
  // frequencies of a target device. The value of cpu_id starts from 0 to
  // maximum number of cpu on the target device. Any value that is greater than
  // the maximum number is ignored. The field freq incidecs the desired runtime
  // cpu frequency, where 0 means the target CPU shall be put offline, -1 means
  // that the target cpu should be running at maximum possible frequency, and
  // any positive number specifies desired runtime frequency which must be one
  // of supported frequencies by the target CPU.
  message CpuRuntimeFreq {
    optional int64 cpu_id = 1;
    optional int64 freq = 2;
  }
  repeated CpuRuntimeFreq cpu_runtime_freq = 36 [(field_detail) = {
    help: "This is a <cup_id, freq> pairs specifies runtime speed of given cpu."
          "If any CPU ID is missing here, it will be disabled."
          "This field will be ignored if |enforce_cpu_status| is false."
  }];

  optional bool lock_gpu_speed_to_max = 37 [(field_detail) = {
    help: "If true, GPU frequency will be locked to maximum available one "
          "as well as be put into performance mode."
  }];

  optional bool stop_interfering_services = 38 [(field_detail) = {
    help: "If true, will stop services specified in "
          "interfering_service_to_stop_after_settings. "
          "If no service specified, "
          "will stop the following services: thermal-engine, thermald, perfd, "
          "and mpdecision. Note that these services are deprecated "
          "in new Pixel devices (>= Pixel 2)."
  }];

  optional bool prevent_system_suspend = 39 [(field_detail) = {
    help: "True to acquire a temporary partial wakelock to prevent system "
          "suspend."
  }];

  optional bool drop_kernel_caches = 40
      [(field_detail) = { help: "True to drop kernel caches." }];

  optional float max_allowed_temperature = 41 [(field_detail) = {
    help: "Max temperature acceptable to run test in celsius. No temperature "
          "check/enforcement if given value is less than or equals 0."
  }];

  optional int64 acceptable_temperature_wait_timeout_minute = 74 [
    default = 10,
    (field_detail) = {
      help: "The maximum period in minute to wait for the temperature to be "
            "acceptable. The default value is 10."
    }
  ];

  optional bool enable_auto_update = 42 [
    deprecated = true,
    (field_detail) = {
      help: "Deprecated. Use AndroidDisableAutoUpdatesDecorator instead."
    }
  ];

  optional bool enable_gcm_service = 43
      [(field_detail) = { help: "False to disable GCM service." }];

  optional int64 gms_max_reconnect_delay_sec = 44 [(field_detail) = {
    help: "The maximum period between GCM reconnect attempts in seconds."
  }];

  optional int64 gms_min_reconnect_delay_long_sec = 45 [(field_detail) = {
    help: "The longer of the two delays between GCM reconnects in seconds, "
          "typically applied to mobile."
  }];

  optional int64 gms_min_reconnect_delay_short_sec = 46 [(field_detail) = {
    help: "The shorter of the two delays between GCM reconnects in seconds, "
          "typically applied to WiFi."
  }];

  optional bool enable_gestures = 47
      [(field_detail) = { help: "True to enable Move gestures." }];

  optional bool enable_net_scheduler = 48
      [(field_detail) = { help: "True to enable net_scheduler." }];

  optional bool enable_bluetooth = 49
      [(field_detail) = { help: "Whether bluetooth is enabled/disabled." }];

  optional bool enable_sound_effects = 50 [(field_detail) = {
    help: "Whether the sounds effects (key clicks, lid open ...) are enabled."
  }];

  optional bool enable_auto_time = 51 [(field_detail) = {
    help: "Whether or not if the user prefers the date and time to "
          "be automatically fetched from the network (NITZ). "
          "Notice that the time zone won't be synced(b/20150600)."
  }];

  optional bool use_location_for_services = 52 [(field_detail) = {
    help: "Whether Google apps can access location. Internal devices may have "
          "status \"DISABLED_BY_SECURITY\" if this is not set. Enabling this "
          "may not be enough to enable location; |location_denylist| may need "
          "to be cleared, or the app in question may need to be added to "
          "|location_allowlist|."
  }];

  optional string location_denylist = 53 [(field_detail) = {
    help: "Comma-delineated list of package prefixes which are prevented from "
          "accessing location. Clearing this alone may not enable location; "
          "|use_location_for_services| may also need to be enabled."
  }];

  optional string location_allowlist = 54 [(field_detail) = {
    help: "Comma-delineated list of package prefixes which are allowed to "
          "access location. Having the app in question in this list alone may "
          "not enable location; |use_location_for_services| may also need to "
          "be enabled. As many apps use GmsCore's location services, removing "
          "com.google.android.gms from this list may cause unexpected "
          "behavior."
  }];

  optional bool disable_calling = 55 [
    (field_detail) = { help: "Disable or enable calling. It requires reboot." }
  ];

  optional bool wtf_is_fatal = 56
      [(field_detail) = { help: "If true makes Log.wtf() to crash." }];

  optional bool anr_show_background = 57 [(field_detail) = {
    help: "If true ANRs in invisible background processes bring up a dialog."
  }];

  optional bool synchronize_date_with_host = 58 [(field_detail) = {
    help: "True to set the date on the device based on the host's time. "
          "If possible, \"enable_auto_time\" should be used instead. Use "
          "this option only if the test is run entirely offline."
          "The time on the device will be within +/- 5 seconds from the "
          "hosts time. If the difference is any bigger, the test will fail."
  }];

  optional bool enable_instant_app = 59 [(field_detail) = {
    help: "Whether or not enable instant app (go/instantapps)."
  }];

  optional string chimera_denylist = 60 [(field_detail) = {
    help: "Comma-delineated list of GMSCore chimera modules to denylist. "
          "Denylisted modules will be disabled in GMSCore, which can be "
          "useful for system health module tests (e.g. memory) since it can "
          "eliminate interference from other modules. Requires a rooted device "
          "with GMSCore v11 or later."
  }];

  optional bool enable_auto_timezone = 61 [
    (field_detail) = { help: "Whether or not enable timezone network sync." }
  ];

  optional bool enable_24h_time_format = 62 [
    (field_detail) = { help: "If true enables 24h time format, otherwise 12h." }
  ];

  optional string timezone = 63 [(field_detail) = { help: "Device timezone." }];

  optional bool enable_full_battery_stats_history = 64 [(field_detail) = {
    help: "Whether or not enable full battery stats history."
  }];

  optional bool enable_wake_gesture = 65 [(field_detail) = {
    help: "Whether the device should wake when the wake gesture sensor "
          "detects motion."
  }];

  optional bool enable_always_on_display = 66
      [(field_detail) = { help: "Whether or not enable always on display" }];

  optional bool enable_location_compact_logging = 67 [(field_detail) = {
    help: "Whether or not enable location compact logging. Compact logging "
          "help to understand the internal state of the location process. "
          "It can be visaulized through Location historian (go/locpowerbug)"
  }];

  optional bool enable_camera_hdr = 68
      [(field_detail) = { help: "Whether or not enable camera HDR option" }];

  optional bool enable_magic_tether = 69 [(field_detail) = {
    help: "Whether or not enable magic tether feature. Magic Tether provides "
          "a way for devices without LTE connections (e.g., tablets) to tether "
          "automatically to phones with LTE connections, without requiring the "
          "user to interact with the phone to do so"
  }];

  optional bool enable_bypass_gms_phenotype_experiments = 70 [(field_detail) = {
    help: "Whether or not enable bypassing gms phenotype experiments"
  }];

  optional bool enable_verbose_adbd = 71 [(field_detail) = {
    help: "When enabled, adbd on the phone will log a verbose version of its "
          "log. This property requires a reboot."
  }];

  repeated string clear_package_cache = 72
      [(field_detail) = { help: "Package to clear cache." }];

  optional bool enable_hidden_api = 73 [(field_detail) = {
    help: "When enabled, restricted access to framework API that are not "
          "exposed in the public API will be removed. Without this flag, "
          "user may get NoSuchMethodException or NoSuchFieldException if they "
          "violate the rules. Restriction enabled in Android pi-dev and master "
          "branches"
  }];

  optional bool disable_verity = 75 [(field_detail) = {
    help: "Explicitly disable verity on the device. This requires a rooted "
          "device with SDK version >=22."
  }];

  optional bool enable_fuse = 76 [(field_detail) = {
    help: "When enabled, fuse is enabled. This is only valid for Android R."
  }];

  repeated string interfering_service_to_stop_after_settings = 77
      [(field_detail) = {
        help: "Service to stop after settings. Must enable the flag "
              "stop_interfering_services. Please make sure the services "
              "are valid for your chosen platform."
      }];

  optional string location_blacklist = 78 [
    deprecated = true,
    (field_detail) = { help: "Use location_denylist instead." }
  ];

  optional string location_whitelist = 79 [
    deprecated = true,
    (field_detail) = { help: "Use location_allowlist instead." }
  ];

  optional string chimera_blacklist = 80 [
    deprecated = true,
    (field_detail) = { help: "Use chimera_denylist instead." }
  ];

  optional bool screen_always_on = 81 [(field_detail) = {
    help: "Turn 'screen always on' on or off. If set to true, then "
          "screen_timeout_sec must be unset."
  }];

  // Deprecated fields. DO NOT reuse them.
  reserved 1, 11, 15;
}
