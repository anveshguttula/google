/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package mobileharness.shared.spec;

import "google/protobuf/descriptor.proto";

option java_package = "com.google.wireless.qa.mobileharness.shared.proto.spec";
option java_multiple_files = true;

// Specs of Mobile Harness driver. Any Mobile Harness driver implementing
// {@code SpecConfigurable} should define a protobuf Spec extending from
// {@code mobileharness.proto.spec.DriverSpec}.
// For example:
// package_name := com.google.wireless.qa.mobileharness
// If there is a configable driver <package_name>.shared.lib.driver.SomeDriver,
// users should define a protobuf with all necessary specs in file
// <package_name>.shared.proto.spec.driver.some_driver_spec, and make it an
// extension of {@code mobileharness.shared.spec.DriverSpec},
// like:
//    package mobileharness.shared.spec;
//    option java_package = "<package_name>.shared.proto.spec.driver";
//    option java_multiple_files = true;  // Don't wrap with outer class.
//
//    message SomeDriverSpec {
//      extension DriverSpec {
//        optional SomeDriverSpec ext = <your_cl_number>;
//      }
//      // your settings for SomeDriver.
//      optional string mode = 1;
//      optional int32 mem_kb_to_dumpheap = 2;
//      ...
//    }
// And define the driver to implement {@code SpecConfigable<SomeDriverSpec>}:
//    public class SomeDriver implements SpecConfigable<SomeDriverSpec> {
//      ...
//    }
//
// After the class is set, users could write a protobuf text file in the form of
// {@code mobileharness.shared.spec.JobSpec}, for example:
//   driver_spec {
//     [mobileharness.shared.spec.SomeDriverSpec] {
//       mem_kb_to_dumpheap: 100
//       mode: "test_mode"
//     }
//   }
//   decorator_spec {
//     [mobileharness.shared.spec.OneDecorator] {
//       file_path_on_device: "/data/one.log"
//     }
//     [mobileharness.shared.spec.TwoDecorator] {
//       file_path_on_device: "/data/two.log"
//     }
//   }
//
// And set the file to "spec_file" in mobile_test. Mobile Harness could
// load the spec automatically from the file, and initialize the
// Driver/Decorator with it. See {@code mobileharness.shared.spec.JobSpec} for
// how to set the text file as an option of mobile_test.
message DriverSpec {
  extensions 1000 to max;
}

// Specs for Mobile Harness decorator. It is similar as DriverSpec. This is an
// example:
//    message SomeDecoratorSpec {
//      // It should extend from *DecoratorSpec* instead of *DriverSpec*.
//      extension DecoratorSpec {
//        optional SomeDecoratorSpec ext = <field_number>;
//      }
//      ...
//    }
// and the decorator class should implement {@code
// SpecConfigable<SomeDecoratorSpec>}.
message DecoratorSpec {
  extensions 1000 to max;
}

// Specification of the speceters defined in {@code DriverSpec} and
// {@code DecoratorSpec}. An example:
//   message SomeDriverConfig {
//     extension DriverSpec {
//       optional SomeDriverSpec ext = <your_cl_number>;
//     }
//
//     option string runner = 1 [(mobileharness.shared.spec.field_detail) = {
//       is_required: false
//       help: "The class name of runner."
//     }];
//
//     optional string async = 2 [(mobileharness.shared.spec.file_detail) = {
//       is_required: false
//       help: "Whether to async run test."
//     }];
//   }
//
// Once a field is annotated with FieldDetails, Mobile Harness will parse and
// load it automatically and show it on frontend. such as http://go/moha-wizard
// and http://go/moha-moscar.
message FieldDetail {
  // Whether the spec is required.
  optional bool is_required = 1;
  // help messages of a spec.
  optional string help = 2;
}

// Details of a field which is a file path. It is currently same as
// FieldDetails, but may change in the future.
// NOTE:
// If you set a single string file field with a target which may generate
// multiple output files, Mobile Harness will only keep the first one. For
// example:
//   {
//     [mobileharness.shared.spec.SomeDecoratorSpec.ext] {
//       input: "//j/c/g/wireless/mobileharness:multiple_input"
//     }
//   }
// and the target //j/c/g/w/m:multiple_input creates a list of files:
//   ["input_1.txt", "input_2.txt", "input_3.txt"]
// In the decorator code, {@code spec.getOutput()} could only get
// "input_1.txt".
message FileDetail {
  optional bool is_required = 1;
  optional string help = 2;
}

// A file item.
message Google3File {
  reserved 1;  // For internal.

  reserved 2;  // For internal.

  // File paths.
  repeated string output = 3;

  reserved 4;  // For internal.
}

// Set details message as Protobuf field option. It is for system use.
extend google.protobuf.FieldOptions {
  optional FieldDetail field_detail = 122869282;
  optional FileDetail file_detail = 122869443;
}
